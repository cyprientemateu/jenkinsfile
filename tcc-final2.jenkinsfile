pipeline {
    agent {
        label 'master'
    }    

    parameters {
        string(name: 'USERNAME', defaultValue: '', description: 'Enter username')
        string(name: 'PASSWORD', defaultValue: '', description: 'Enter password')
        string(name: 'EMAIL', defaultValue: '', description: 'Enter email')
        string(name: 'FIRSTNAME', defaultValue: '', description: 'Enter first name')
        string(name: 'LASTNAME', defaultValue: '', description: 'Enter last name')
        string(name: 'GROUP_NAME', defaultValue: '', description: 'Enter group name')

        choice(
            name: 'ACCOUNT_MANAGEMENT',
            choices: ['', 'add_user', 'delete_user', 'lock_user', 'unlock_user', 'create_group', 'delete_group', 'add_user_to_group', 'remove_user_from_group'],
            description: ''
        )
    }

    stages {
        stage('Sanity Check') {
            steps {
                script {
                    sanity_check()
                }
            }
        }
        stage('Collect Information') {
            steps {
                script {
                    collect_information()
                }
            }
        }
        stage('Create User Account') {
            when {
                expression { params.ACCOUNT_MANAGEMENT == 'add_user' }
            }
            steps {
                script {
                    create_user_account()
                }
            }
        }
        stage('Delete User Account') {
            when {
                expression { params.ACCOUNT_MANAGEMENT == 'delete_user' }
            }
            steps {
                script {
                    delete_user_account()
                }
            }
        }
        stage('Lock User Account') {
            when {
                expression { params.ACCOUNT_MANAGEMENT == 'lock_user' }
            }
            steps {
                script {
                    lock_user_account()
                }
            }
        }
        stage('Unlock User Account') {
            when {
                expression { params.ACCOUNT_MANAGEMENT == 'unlock_user' }
            }
            steps {
                script {
                    unlock_user_account()
                }
            }
        }
        stage('Create Group') {
            when {
                expression { params.ACCOUNT_MANAGEMENT == 'create_group' }
            }
            steps {
                script {
                    create_group()
                }
            }
        }
        stage('Delete Group') {
            when {
                expression { params.ACCOUNT_MANAGEMENT == 'delete_group' }
            }
            steps {
                script {
                    delete_group()
                }
            }
        }
        stage('Add User to Group') {
            when {
                expression { params.ACCOUNT_MANAGEMENT == 'add_user_to_group' }
            }
            steps {
                script {
                    add_user_to_group()
                }
            }
        }
        stage('Remove User from Group') {
            when {
                expression { params.ACCOUNT_MANAGEMENT == 'remove_user_from_group' }
            }
            steps {
                script {
                    remove_user_from_group()
                }
            }
        }
    }
}

def sanity_check() {
    if (params.USERNAME.isEmpty()){
       echo "The parameter USERNAME is not set"
       sh 'exit 2'
   } 
    if (params.PASSWORD.isEmpty()){
      echo "The parameter PASSWORD is not set"
      sh 'exit 2'
   }
   if (params.EMAIL.isEmpty()){
       echo "The parameter EMAIL is not set"
       sh 'exit 2'
   }
   if (params.FIRSTNAME.isEmpty()){
       echo "The parameter FIRSTNAME is not set"
       sh 'exit 2'
   }
   if (params.LASTNAME.isEmpty()){
       echo "The parameter LASTNAME is not set"
       sh 'exit 2'
   }
}

def collect_information() {
    sh """
        echo "Username: ${params.USERNAME}"
        echo "Password : ${params.PASSWORD}"
        echo "Email: ${params.EMAIL}"
        echo "First Name: ${params.FIRSTNAME}"
        echo "Last Name: ${params.LASTNAME}"
    """
}

def create_user_account() {
    script {
        if (params.ACCOUNT_MANAGEMENT == 'add_user')
        sh """
            if ! grep -q "^${params.USERNAME}:" /etc/passwd; then
            sudo useradd -m ${params.USERNAME}
            sudo echo "${params.USERNAME}:${params.PASSWORD}" | sudo -S chpasswd
            sudo usermod -c "${params.FIRSTNAME} ${params.LASTNAME}" ${params.USERNAME}
            sudo cat /etc/passwd |grep ${params.USERNAME}
            sudo cat /etc/shadow |grep ${params.USERNAME}
            sudo cat /etc/group |grep '5'
            ls /home
            else
            echo "user ${params.USERNAME} already exists"
            fi
        """
    }
}

def delete_user_account() {
    script {
        if (params.ACCOUNT_MANAGEMENT == 'delete_user')  
        sh """
            if ! grep -q "^${params.USERNAME}:" /etc/passwd; then
            echo "User ${params.USERNAME} does not exist."
            else
            sudo userdel -r ${params.USERNAME}
            echo "User ${params.USERNAME} with the password ${params.PASSWORD} has been deleted."
            sudo cat /etc/passwd |grep ${params.USERNAME} || true
            sudo cat /etc/shadow |grep ${params.USERNAME} || true
            fi
        """
    }
}

def lock_user_account() {
    script {
        if (params.ACCOUNT_MANAGEMENT == 'lock_user')
        sh """
            if ! grep -q "^${params.USERNAME}:" /etc/passwd; then
            echo "user ${params.USERNAME} does not exist"
            else
            sudo passwd -l ${params.USERNAME}
            sudo echo "The user ${params.USERNAME} with password ${params.PASSWORD} has been locked"
            sudo cat /etc/shadow |grep ${params.USERNAME}
            fi
        """
    }
}

def unlock_user_account() {
    script {
        if (params.ACCOUNT_MANAGEMENT == 'unlock_user')
        sh """
            if ! grep -q "^${params.USERNAME}:" /etc/passwd; then
            echo "user ${params.USERNAME} does not exist"
            else
            sudo passwd -u ${params.USERNAME}
            sudo echo "The user ${params.USERNAME} with password ${params.PASSWORD} has been unlocked"
            sudo cat /etc/shadow |grep ${params.USERNAME}
            fi
        """
    }
}
def create_group() {
    script{
        if (params.ACCOUNT_MANAGEMENT == 'create_group')
        sh """
            if ! grep -q "^${params.GROUP_NAME}:" /etc/group; then
            sudo groupadd ${params.GROUP_NAME}
            echo "Group ${params.GROUP_NAME} has been created."
            sudo cat /etc/group |grep '5'
            else
            echo "group ${params.GROUP_NAME} already exists"
            fi
        """ 
    }
}
def delete_group() {
    script {
        if (params.ACCOUNT_MANAGEMENT == 'delete_group') {
            sh """
                if grep -q "^${params.GROUP_NAME}:" /etc/group; then
                    sudo delgroup ${params.GROUP_NAME}
                    echo "Group ${params.GROUP_NAME} has been deleted."
                    sudo cat /etc/group
                else
                    echo "Group ${params.GROUP_NAME} does not exist."
                fi
            """
        }
    }
}

def add_user_to_group() {
    script {
        if (params.ACCOUNT_MANAGEMENT == 'add_user_to_group') {
            sh """
                if ! id -u ${params.USERNAME} > /dev/null 2>&1; then
                    sudo useradd -m -s /bin/bash ${params.USERNAME}
                    echo "User ${params.USERNAME} has been created."
                fi

                if ! getent group ${params.GROUP_NAME} > /dev/null 2>&1; then
                    sudo groupadd ${params.GROUP_NAME}
                    echo "Group ${params.GROUP_NAME} has been created."
                fi

                sudo usermod -aG ${params.GROUP_NAME} ${params.USERNAME}
                echo "User ${params.USERNAME} has been added to group ${params.GROUP_NAME}."

                sudo cat /etc/passwd | grep ${params.USERNAME}
                sudo cat /etc/group
                sudo tail -5 /etc/group
            """
        }
    }
}
def remove_user_from_group() {
    script{
        if (params.ACCOUNT_MANAGEMENT == 'remove_user_from_group')
        sh """
            if grep -q "^${params.GROUP_NAME}:" /etc/group; then
            sudo deluser ${params.USERNAME} ${params.GROUP_NAME}
            sudo echo "User ${params.USERNAME} has been removed from group ${params.GROUP_NAME}."
            sudo cat /etc/group
            else
            echo "Group ${params.GROUP_NAME} does not exist."
            fi
        """ 
    }
}
